using System;
using System.Linq;
using System.Collections.Generic;
using JetBrains.Annotations;
using UnityEngine;
using Random = System.Random;
using System.Runtime.CompilerServices;
using System.Numerics;
using Quaternion = UnityEngine.Quaternion;
using Vector3 = UnityEngine.Vector3;
public static class DestinationHandler
{
    public static void SetDestination(this GameObject gameObject, Vector3 position, Quaternion rotation)
    {
        TileComponent tileComponent = gameObject.GetComponent<TileComponent>();
        if (tileComponent == null)
        {
            tileComponent = gameObject.AddComponent<TileComponent>();
            tileComponent.targetDestination = new Queue<Vector3>();
            tileComponent.targetRotation = new Queue<Quaternion>();
            tileComponent.secondsTravelled = 0f;
        }
        tileComponent.targetDestination.Enqueue(position);
        tileComponent.targetRotation.Enqueue(rotation);
    }
    public static void AddSeconds(this GameObject gameObject, float seconds)
    {
        TileComponent tileComponent = gameObject.GetComponent<TileComponent>();
        tileComponent.secondsTravelled += seconds; 
    }
    public static void ClearTarget(this GameObject gameObject)
    {
        TileComponent tileComponent = gameObject.GetComponent<TileComponent>();
        if (tileComponent.targetDestination.Count > 0)
        {
            tileComponent.targetDestination.Dequeue();
            tileComponent.targetRotation.Dequeue();
            tileComponent.secondsTravelled = 0f;
        }
    }
    public static Vector3 GetDestination(this GameObject gameObject)
    {
        TileComponent tileComponent = gameObject.GetComponent<TileComponent>();
        if (tileComponent.targetDestination.Count == 0)
        {
            return gameObject.transform.position;
        }
        else
        {
            return gameObject.GetComponent<TileComponent>().targetDestination.Peek();
        }
    }
    public static Quaternion GetRotation(this GameObject gameObject)
    {
        TileComponent tileComponent = gameObject.GetComponent<TileComponent>();
        if (tileComponent.targetRotation.Count == 0)
        {
            return gameObject.transform.rotation;
        }
        else
        {
            return gameObject.GetComponent<TileComponent>().targetRotation.Peek();
        }
    }
    public static float GetSecondsTravelled(this GameObject gameObject)
    {
        return gameObject.GetComponent<TileComponent>().secondsTravelled;
    }
    private class TileComponent : MonoBehaviour
    {
        public Queue<Vector3> targetDestination;
        public Queue<Quaternion> targetRotation;
        public float secondsTravelled;
    }
}
public class InstantiateGame : MonoBehaviour
{ 
    private Vector3 position, sidestep, startPos, finalPos, tileSize, tileOffset;
    private Quaternion rotation, startRot, finalRot;
    private Nullable<int> leadIndex = 0, backIndex = 0, funcIndex = 0;
    private int cluster, row, col;
    private float stopWatch, travelTime, duration;
    private Action[] pendingFunc;
    // private Dictionary<int, List<Vector3>> quadrant;
    private Vector3[][] quadrant;
    public static List<GameObject> TileSet, TileArray;
    public static List<GameObject>[] TileWalls = new List<GameObject>[4];
    public static List<GameObject>[] TileBlocks = new List<GameObject>[4];
    public static List<GameObject>[] TileHands = new List<GameObject>[4];

    // public static GameObject[][] TileWalls, TileBlocks, TileHands;
    void Awake()
    {   
        TileSet = new List<GameObject>();
        Dictionary<string, IEnumerable<string>> constructor = new Dictionary<string, IEnumerable<string>>
        {
            { "b", new string[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" } },
            { "s", new string[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" } },
            { "c", new string[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" } },
            { "d", new string[] { "N", "S", "W", "E" } },
            { "t", new string[] { "G", "R", "W" } },
            { "f", new string[] { "R", "B" } }
        };
        
        // Create TileSet
        GameObject temp; // tile = Resources.Load("Tile") as GameObject;
        foreach (string suit in constructor.Keys)
        {
            foreach (string unit in constructor[suit])
            {
                for (int tileID = 1; tileID <= 4; tileID++)
                {
                    temp = Instantiate(Resources.Load("Tile")) as GameObject;
                    temp.name = suit + unit + "-" + tileID;
                    temp.transform.localScale = new Vector3(1600, 1600, 2000);
                    temp.transform.position = new Vector3(0, -0.1f, 0);
                    TileSet.Add(temp);
                }
            }
        }

        // Shuffle TileSet by Fisher-Yates algorithm
        Random random = new Random();
        for (int i = TileSet.Count - 1; i > 0; i--)
        {
            int j = random.Next(0, i + 1);
            temp = TileSet[i];
            TileSet[i] = TileSet[j];
            TileSet[j] = temp;
        }

        // Assign TileWalls and TileBlocks

        for (int i = 0; i < 4; i++)
        {
            TileWalls[i] = new List<GameObject>();
            for (int j = 0; j < 20; j++)
            {
                TileWalls[i].Add(TileSet[(i * 20) + j]);
            }

            TileBlocks[i] = new List<GameObject>();
            for (int j = 0; j < 16; j++)
            {
                TileBlocks[i].Add(TileSet[(i * 16) + j + 80]);
            }
        }

        int tileIndex;
        List<GameObject> combinedHand = new List<GameObject>();
        for (int i = 0; i < 4; i++)
        {
            TileHands[i] = new List<GameObject>();
            for (int j = 0; j < 16; j++)
            {
                // from 80 onwards
                // [*] = 00.01.02.03.04.05.06.07.08.09.10.11.12.13.14.15
                // [0] = 00.01.08.09.00.01.08.09.00.01.08.09.00.01.08.09
                // [1] = 02.03.10.11.02.03.10.11.02.03.10.11.02.03.10.11
                // [2] = 04.05.12.13.04.05.12.13.04.05.12.13.04.05.12.13
                // [3] = 06.07.14.15.06.07.14.15.06.07.14.15.06.07.14.15

                tileIndex = 80 + (2 * i) + (j % 2) + (j / 2) * 8;
                //tileIndex = 80 + (2 * i) + (j % 2) + ((j % 4) / 2) * 8;
                Debug.Log(tileIndex);

                // rewrite into more readable code by using for loop
                // for (i), i += 2, tilehands [0] and [1] = tileset [80] and [81]
                TileHands[i].Add(TileSet[tileIndex]);
                combinedHand.Add(TileSet[tileIndex]);
            }
        }

        quadrant = new Vector3[4][]
        {
            //              SIDE                   STARTING TILE          SUCCEEDING TILE
            new Vector3[] { new Vector3(0, 0, -1), new Vector3(-1, 0, 0), new Vector3(+1, 0, 0) }, // SOUTH
            new Vector3[] { new Vector3(+1, 0, 0), new Vector3(0, 0, -1), new Vector3(0, 0, +1) }, // WEST
            new Vector3[] { new Vector3(0, 0, +1), new Vector3(+1, 0, 0), new Vector3(-1, 0, 0) }, // NORTH
            new Vector3[] { new Vector3(-1, 0, 0), new Vector3(0, 0, +1), new Vector3(0, 0, -1) }  // EAST
        };

        PositWalls(TileWalls, numTiles: 20, xRotation: 90, perimSize: 2.24f);
        PositWalls(TileBlocks, numTiles: 8, xRotation: 90, perimSize: 1.25f);
        PositWalls(TileHands, numTiles: 16, xRotation: 0, perimSize: 3.25f);

        pendingFunc = new Action[] 
        {
            () => { duration = 0.02f; cluster = 1; TileArray = TileSet; },
            () => { duration = 0.15f; cluster = 4; TileArray = combinedHand; },
            () => { enabled = false; }
        };
    }
    void PositWalls(List<GameObject>[] TileArray, int numTiles, int xRotation, float perimSize)
    {
        Bounds bounds = TileArray[0][0].GetComponent<MeshRenderer>().bounds;
        tileSize = Quaternion.Euler((xRotation - 90), 0, 0) * bounds.size;
        tileOffset = tileSize * 0.5f;

        Vector3 wallVector, startVector, lift;
        for (int wallIndex = 0; wallIndex < 4; wallIndex++)
        {
            wallVector  = quadrant[wallIndex][0] * (perimSize + tileOffset.z);
            startVector = quadrant[wallIndex][1] * ((numTiles / 2) * tileSize.x - tileOffset.x);
            if (TileArray == TileWalls)
            {
                startVector -= quadrant[wallIndex][1] * (tileOffset.z);
            }

            sidestep = quadrant[wallIndex][2] * tileSize.x;
            rotation = Quaternion.Euler(xRotation, (2 - wallIndex) * 90, 0);
            for (int i = 0; i < TileArray[wallIndex].Count; i++)
            {
                lift = new Vector3(0, tileSize.y, 0) * (0.5f + (i / numTiles));
                position = wallVector + startVector + lift + (sidestep * (i % numTiles));

                TileArray[wallIndex][i].SetDestination(position, rotation);
            }
        }
    }
    void Update()
    {
        if (leadIndex == 0)
        {
            pendingFunc[funcIndex.Value]();
            stopWatch = Time.time;
        }

        leadIndex = (int)((Time.time - stopWatch) / duration);
        leadIndex = cluster * (1 + leadIndex);
        leadIndex = Math.Min(TileArray.Count, leadIndex.Value);
        
        GameObject temp = TileArray[leadIndex.Value - 1];
        if (temp.transform.position == new Vector3(0, -0.1f, 0))
        {
            temp.transform.position = temp.GetDestination() + new Vector3(0, 0.5f, 0);
            temp.transform.rotation = temp.GetRotation();
        }

        for (int index = backIndex.Value; index < leadIndex.Value; index++)
        {        
            temp = TileArray[index];
            startPos = temp.transform.position;
            startRot = temp.transform.rotation;
            finalPos = temp.GetDestination();
            finalRot = temp.GetRotation();
            
            temp.AddSeconds(Time.deltaTime);
            float travelTime = temp.GetSecondsTravelled();

            temp.transform.position = Vector3.Lerp(startPos, finalPos, travelTime / 3);
            temp.transform.rotation = Quaternion.Lerp(startRot, finalRot, travelTime / 3);

            if (startPos == finalPos)
            {
                temp.ClearTarget();
                backIndex++;
            }
        }

        if (backIndex.Value == TileArray.Count)
        {
            //Debug.Log(funcIndex);
            backIndex = 0;
            leadIndex = 0;
            funcIndex++;
        }
    }
    /*void Update()
    {
        if (leadIndex == null)
        {
            pendingFunc[funcIndex.Value]();
            backIndex = 0;
            leadIndex = 0;
            stopWatch = Time.time;
        }

        leadIndex = (int)((Time.time - stopWatch) / duration);
        leadIndex = (cluster * leadIndex) + (cluster - 1); // (cluster * (1 + leadIndex)), index < leadIndex.Value
        leadIndex = Math.Min(TileArray.Count - 1, leadIndex.Value);
        
        GameObject temp = TileArray[leadIndex.Value];
        if (temp.transform.position == new Vector3(0, -0.1f, 0))
        {
            temp.transform.position = temp.GetDestination() + new Vector3(0, 0.5f, 0);
            temp.transform.rotation = temp.GetRotation();
        }

        for (int index = backIndex.Value; index <= leadIndex.Value; index++)
        {        
            temp = TileArray[index];
            startPos = temp.transform.position;
            startRot = temp.transform.rotation;
            finalPos = temp.GetDestination();
            finalRot = temp.GetRotation();
            
            temp.AddSeconds(Time.deltaTime);
            float travelTime = temp.GetSecondsTravelled();

            temp.transform.position = Vector3.Lerp(startPos, finalPos, travelTime / 3);
            temp.transform.rotation = Quaternion.Lerp(startRot, finalRot, travelTime / 3);

            if (startPos == finalPos)
            {
                temp.ClearTarget();
                backIndex++;
            }
        }

        if (backIndex.Value == TileArray.Count)
        {
            //Debug.Log(funcIndex);
            backIndex = null;
            leadIndex = null;
            funcIndex++;
        }
    }*/
}

// decompose tilehands, assign to player
// tilehand randomizer
// create tilehand aligner, automatically centers hand given n tiles